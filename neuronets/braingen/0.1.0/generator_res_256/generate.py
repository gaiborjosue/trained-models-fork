#!/usr/bin/env python3
import os
import click
import logging
import tensorflow as tf
import numpy as np
from pathlib import Path
import nibabel as nib


@click.command()
@click.argument("outfile")
@click.option(
    "-m",
    "--model",
    type=click.Path(exists=True),
    required=True,
    help="Path to saved models directory containing the HDF5 files.",
)
@click.option(
    "-l",
    "--latent-size",
    type=int,
    default=1024,
    help=("Input latent size for the generator."),
)
@click.option(
    "--drange-in",
    default=(-1, 1),
    type=int,
    nargs=2,
    help="Range of values of image generated by model.",
)
@click.option(
    "--drange-out",
    default=(0, 255),
    type=int,
    nargs=2,
    help="Desired output range of values of image.",
)
@click.option(
    "-o",
    "--output-shape",
    default=(128, 128, 128),
    type=int,
    nargs=3,
    help="Shape of sub-volumes to generate.",
)
@click.option(
    "-v", "--verbose", is_flag=True, help="Print progress bar.",
)
def generate(
    *,
    outfile,
    model,
    latent_size,
    drange_in,
    drange_out,
    output_shape,
    verbose,
):
    """Generate images from latents using a trained GAN model.
    The generated image is saved to OUTFILE.
    """

    if not verbose:
        # Suppress most logging messages.
        os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"
        tf.get_logger().setLevel(logging.ERROR)
        
    outfile = Path(outfile).resolve()
        
    if outfile.exists():
        raise FileExistsError(
            "Output file already exists. Will not overwrite {}".format(outfile)
            )
        
    if verbose:
        click.echo("Generating ...")
    try:
        latents = tf.random.normal((1, latent_size))
        #output_resolution = int(output_shape[0])
        #model = os.path.join(model, "generator_res_{}".format(output_resolution))
        generator = tf.saved_model.load(model)
        generate = generator.signatures["serving_default"]
        img = generate(latents)["generated"]
        img = np.squeeze(img)
    except Exception:
        click.echo(click.style("ERROR: generation failed. See error trace.", fg="red"))
        raise
        
    if verbose:
        click.echo("Saving ...")
    
    img = nib.Nifti1Image(img.astype(np.uint8), np.eye(4))
    nib.save(img, str(outfile))

    if verbose:
        click.echo("Output saved to {}".format(outfile))
        
        
if __name__ == '__main__':
    generate()
