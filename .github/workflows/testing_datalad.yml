name: Testing Datalad

# Trigger the workflow on pull request
on:
  issues:
    types: [ assigned, labeled ]

jobs:

  create_new_branch:
    if: ${{startsWith(github.event.issue.title, 'Testing Model:') && contains(github.event.issue.labels.*.name, 'failed') != true}}

    runs-on: ubuntu-latest

    outputs:
      BRANCHNAME: ${{ steps.branch.outputs.branchName }}

      # All the issue form data
      MODELPATH: ${{ steps.get_path.outputs.path }}
      WEIGHTS: ${{ steps.get_weights.outputs.weights }}
      DOCKER: ${{ steps.get_docker.outputs.docker }}
      PYTHON: ${{ steps.python_scripts.outputs.pythons }}
      MODELINFO: ${{ env.model_info }}
      SAMPLEDATA: ${{ steps.get_data.outputs.sample_data }}
      PYTHONS: ${{ env.pythons }}
      DEEPCSR: ${{ steps.get_model_config.outputs.deepcsr_config }}

    steps:
    # This will automatically create a new branch from this issue, using custom config at /.github/issue-branch.yml 游릭
    - name: Create Issue Branch
      id: branch
      uses: robvanderleek/create-issue-branch@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Set up Python 游릭
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    # Checkout the repository to the GitHub Actions runner 游릭
    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.branch.outputs.branchName }}
        
    # Scrape the info from the issue 游릭
    - uses: stefanbuck/github-issue-parser@v3
      id: issue-parser
      with:
        template-path: .github/ISSUE_TEMPLATE/addModel.yml # optional but recommended
    
    # Scrape info from the form 游릭
    - name: Get the Path
      id: get_path
      run: echo "path=${{ steps.issue-parser.outputs.issueparser_path }}" >> $GITHUB_OUTPUT
    
    - name: Get the Weights
      id: get_weights
      run: echo "weights=${{ steps.issue-parser.outputs.issueparser_weights }}" >> $GITHUB_OUTPUT
    
    - name: Get docker folder
      id: get_docker
      run: echo "docker=${{ steps.issue-parser.outputs.issueparser_docker }}" >> $GITHUB_OUTPUT

    - name: Get Python Scripts
      id: python_scripts
      run: |
        echo "pythons<<EOF" >> $GITHUB_ENV
        echo "${{ steps.issue-parser.outputs.issueparser_python-scripts }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Get Model Info
      id: get_model_info
      run: |
        echo "model_info<<EOF" >> $GITHUB_ENV
        echo "${{ steps.issue-parser.outputs.issueparser_model_info }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Get Config
      id: get_model_config
      run: |
        echo "deepcsr_config=${{ steps.issue-parser.outputs.issueparser_deepcsrConfig }}" >> $GITHUB_OUTPUT

    - name: Get Sample Data
      id: get_data
      run: echo "sample_data=${{ steps.issue-parser.outputs.issueparser_sample-data }}" >> $GITHUB_OUTPUT

  push-model:
    needs: create_new_branch

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner to the new branch created for the issue 游릭
      # Checkout the repository to the GitHub Actions runner to the new branch created for the issue 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}


      # Install svn to clone subdir of github repos 游릭
      - name: Install svn
        run: sudo apt-get install subversion
      
      # Get svn url for exporting docker 游릭
      - name: Clone docker folder
        run: |
          url="${{ needs.create_new_branch.outputs.DOCKER }}"
          
          svn_url=$(echo "$url" | sed -E 's|/tree/[^/]+|/trunk|; s|/blob/[^/]+|/trunk|')

          svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker

      # Clone deepcsr config files
      - name: Deepcsr config clone
        run: |
          url="${{ needs.create_new_branch.outputs.DEEPCSR }}"
          
          svn_url=$(echo "$url" | sed -E 's|/tree/[^/]+|/trunk|; s|/blob/[^/]+|/trunk|')

          svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}/

      
      # Get svn url for exporting 游릭
      - name: Generate Python SVN URLs
        id: generate_urls
        run: |
          echo "pythons2<<EOF" >> $GITHUB_ENV
          python ./.github/workflows/getPythonScripts.py >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
            pythons: ${{ needs.create_new_branch.outputs.PYTHONS }}
      
      # Export the urls/clone the scripts 游릭
      - name: Clone python scripts
        run: |
          svn_urls="${{ env.pythons2 }}"
          for svn_url in $svn_urls; do
            svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}
          done
      
      # Get svn urls for exporting card and spec urls 游릭
      - name: Generate Model Info SVN URLs
        id: generate_model_info_urls
        run: |
          echo "model_info2<<EOF" >> $GITHUB_ENV
          python ./.github/workflows/getModelInfo.py >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
            model_info: ${{ needs.create_new_branch.outputs.MODELINFO }}

      # Export the urls/clone the model info 游릭
      - name: Clone model info
        run: |
          model_info="${{ env.model_info2 }}"
          for svn_url in $model_info; do
            svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}
          done
    
      # Commit the new created files and folders to the branch needs.create_new_branch.outputs.BRANCHNAME 游릭
      - name: Commit and Push the new files
        run: |
          git config --global user.name "trained_models"
          git config --global user.email "trained_models"
          git fetch --prune
          git add ${{ needs.create_new_branch.outputs.MODELPATH }}
          git commit -m "Added model files"
          git push -f origin ${{ needs.create_new_branch.outputs.BRANCHNAME }}
  
      

  test_and_push:
    needs: [create_new_branch, push-model]
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner to the new branch created for the issue 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}
      # Install git-annex 游릭
      - name: Install git-annex
        run: |
          sudo apt-get update
          sudo apt-get install git-annex
        
      - name: Verify git-annex Installation
        run: git-annex version
    
      # Install datalad 游릭
      - name: Install Datalad
        run: sudo apt-get install datalad

      # Git annex addurl the weights
      - name: Git-annex add the weights
        run: |
          git config --global user.name "trained_models"
          git config --global user.email "trained_models"
          git-annex init
          git annex addurl --file=${{ needs.create_new_branch.outputs.MODELPATH }}/weights/best_model.pth ${{ needs.create_new_branch.outputs.WEIGHTS }}

      # Datalad save the weights 
      - name: Datalad Save & Push
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
        run: |
          datalad siblings
          datalad siblings configure -s origin --publish-depends osf-storage
          datalad save -m "Added weights"
          datalad push

  failed:
    runs-on: ubuntu-latest

    needs: [create_new_branch, push-model, test_and_push]

    if: ${{ always() && contains(needs.*.result, 'failure') }}

    steps:
      - name: Set labels
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'set-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          labels: 'failed'

      - name: Create comment
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
              Hello @${{ github.event.issue.user.login }}. The folders/scripts you provided did not pass our tests. Please check out the Action, and modify this issue accordingly with other/same urls. 

              When ready, just change the label of this issue to "Ready for testing".
  
          emoji: '+1,eyes'