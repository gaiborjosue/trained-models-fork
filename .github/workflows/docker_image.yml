name: Docker build and Push

# Trigger the workflow on pull request
on:
  pull_request:
    types: [opened, synchronize, closed]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v3


    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    # Install yaml
    - name: Install yaml and oyaml
      run: |
          pip install pyyaml
          pip install oyaml

    # Install linkml
    - name: Install LinkML
      run: pip install linkml

    # Check if the PR description "Organization Name" has a value and matches the one in the model card
    - name: Check PR description
      if: github.event.action == 'opened'
      id: check_pr_desc
      run: |
          python ./.github/workflows/check_pr_description.py
      continue-on-error: true
    
    # Step 3: If the previous step failed, leave a comment and close the PR
    - name: Leave a comment and close PR
      if: steps.check_pr_desc.outcome != 'success' && github.event.action == 'opened'
      run: |
        comment_body="The PR description key 'Organization Name' is empty. Please fill in the required information."
        
        gh pr comment ${{ github.event.number }} --body "$comment_body"

        gh pr close ${{ github.event.number }}

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Get the new model's folder name
    - name: Get latest model folder
      run: |
          python ./.github/workflows/get_latest_model_name.py > latest_folder.txt
    
    # Read the new model's folder name and save it as an environment variable
    - name: Read latest folder name
      id: read_latest_folder
      run: echo "model_folder=$(cat latest_folder.txt)" >> $GITHUB_OUTPUT
    
    # Get the path to the Dockerfile's parent folder (version folder)
    - name: Get Dockerfile path
      run: |
          python ./.github/workflows/get_dockerfile_path.py > dockerfile_path.txt
    
    # Read the path to the Dockerfile and save it as an environment variable
    - name: Read Dockerfile path
      id: read_dockerfile_path
      run: echo "dockerfile_path=$(cat dockerfile_path.txt)" >> $GITHUB_OUTPUT
    
    # Set the Docker image name
    - name: Set Docker image name
      id: set_image_name
      run: |
          echo "image_name=neuronets/${{ steps.read_latest_folder.outputs.model_folder }}" >> $GITHUB_OUTPUT
    
    # Create model card and spec.yaml file
    - name: Generate model card and spec files
      run: |
          echo "## Model Card and Spec Validation :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          echo "Model Card and spec yaml files are being validated here with LinkML Schema" >> $GITHUB_STEP_SUMMARY
          python ./.github/workflows/create_model_card_and_spec.py

    # Update the model's spec.yaml file
    - name: Update yaml file
      run: python ./.github/workflows/update_yaml_info.py

    # Build the Docker image
    - name: Build Docker image
      run: |
          docker build -t ${{ steps.set_image_name.outputs.image_name }} ${{ steps.read_dockerfile_path.outputs.dockerfile_path }}
    
    # Push the Docker image to Docker Hub (only if the PR is merged)
    - name: Push Docker image
      if: github.event.pull_request.merged == true
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker push ${{ steps.set_image_name.outputs.image_name }}

    # Commit the changes (spec.yaml file and model card)
    - name: Commit changes
      if: github.event.pull_request.merged == true
      run: |
        git config --global user.name "trained_models"
        git config --global user.email "trained_models"

        # Add, commit, and push the changes to the user's branch
        git add ${{ steps.read_dockerfile_path.outputs.dockerfile_path }}/spec.yaml

        git commit -m "Updated spec.yaml"

        git pull --rebase origin master

        git push origin HEAD:master
