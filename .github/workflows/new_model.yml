name: Add a new model

# Trigger the workflow on pull request
on:
  issues:
    types: [ assigned, labeled ]


jobs:
  
  create_new_branch:
    if: ${{startsWith(github.event.issue.title, 'New Model:') && github.event.label.name != 'failed'}}

    runs-on: ubuntu-latest

    outputs:
      BRANCHNAME: ${{ steps.branch.outputs.branchName }}

      # All the issue form data
      MODELPATH: ${{ steps.get_path.outputs.path }}
      WEIGHTS: ${{ steps.get_weights.outputs.weights }}
      DOCKER: ${{ steps.get_docker.outputs.docker }}
      PYTHON: ${{ steps.python_scripts.outputs.pythons }}
      MODELINFO: ${{ env.model_info }}
      SAMPLEDATA: ${{ steps.get_data.outputs.sample_data }}
      PYTHONS: ${{ env.pythons }}
      DEEPCSR: ${{ steps.get_model_config.outputs.deepcsr_config }}

    steps:
    # This will automatically create a new branch from this issue, using custom config at /.github/issue-branch.yml 游릭
    - name: Create Issue Branch
      id: branch
      uses: robvanderleek/create-issue-branch@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # Set up Python 游릭
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    # Checkout the repository to the GitHub Actions runner 游릭
    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.branch.outputs.branchName }}
        
    # Scrape the info from the issue 游릭
    - uses: stefanbuck/github-issue-parser@v3
      id: issue-parser
      with:
        template-path: .github/ISSUE_TEMPLATE/addModel.yml # optional but recommended
    
    # Scrape info from the form 游릭
    - name: Get the Path
      id: get_path
      run: echo "path=${{ steps.issue-parser.outputs.issueparser_path }}" >> $GITHUB_OUTPUT
    
    - name: Get the Weights
      id: get_weights
      run: echo "weights=${{ steps.issue-parser.outputs.issueparser_weights }}" >> $GITHUB_OUTPUT
    
    - name: Get docker folder
      id: get_docker
      run: echo "docker=${{ steps.issue-parser.outputs.issueparser_docker }}" >> $GITHUB_OUTPUT

    - name: Get Python Scripts
      id: python_scripts
      run: |
        echo "pythons<<EOF" >> $GITHUB_ENV
        echo "${{ steps.issue-parser.outputs.issueparser_python-scripts }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Get Model Info
      id: get_model_info
      run: |
        echo "model_info<<EOF" >> $GITHUB_ENV
        echo "${{ steps.issue-parser.outputs.issueparser_model_info }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Get Sample Data
      id: get_data
      run: echo "sample_data=${{ steps.issue-parser.outputs.issueparser_sample-data }}" >> $GITHUB_OUTPUT
    
    - name: Get Config
      id: get_model_config
      run: |
        echo "deepcsr_config=${{ steps.issue-parser.outputs.issueparser_deepcsrConfig }}" >> $GITHUB_OUTPUT

  push-model:

    needs: create_new_branch

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner to the new branch created for the issue 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}

      # Install svn to clone subdir of github repos 游릭
      - name: Install svn
        run: sudo apt-get install subversion
      
      # Get svn url for exporting docker 游릭
      - name: Clone docker folder
        run: |
          url="${{ needs.create_new_branch.outputs.DOCKER }}"
          
          svn_url=$(echo "$url" | sed -E 's|/tree/[^/]+|/trunk|; s|/blob/[^/]+|/trunk|')

          svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker
      
      # Get svn url for exporting 游릭
      - name: Generate Python SVN URLs
        id: generate_urls
        run: |
          echo "pythons2<<EOF" >> $GITHUB_ENV
          python ./.github/workflows/getPythonScripts.py >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
            pythons: ${{ needs.create_new_branch.outputs.PYTHONS }}
      
      # Export the urls/clone the scripts 游릭
      - name: Clone python scripts
        run: |
          cd ./${{ needs.create_new_branch.outputs.MODELPATH }}
          svn_urls="${{ env.pythons2 }}"
          for svn_url in $svn_urls; do
            svn export --force $svn_url
          done
      
      # Get svn urls for exporting card and spec urls 游릭
      - name: Generate Model Info SVN URLs
        id: generate_model_info_urls
        run: |
          echo "model_info2<<EOF" >> $GITHUB_ENV
          python ./.github/workflows/getModelInfo.py >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
            model_info: ${{ needs.create_new_branch.outputs.MODELINFO }}

      # Export the urls/clone the model info 游릭
      - name: Clone model info
        run: |
          model_info="${{ env.model_info2 }}"
          for svn_url in $model_info; do
            svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}
          done

      # Clone deepcsr config files
      - name: Deepcsr config clone
        run: |
          url="${{ needs.create_new_branch.outputs.DEEPCSR }}"
              
          svn_url=$(echo "$url" | sed -E 's|/tree/[^/]+|/trunk|; s|/blob/[^/]+|/trunk|')
    
          svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}/
    
      # Commit the new created files and folders to the branch needs.create_new_branch.outputs.BRANCHNAME 游릭
      - name: Commit and Push the new files
        run: |
          git config --global user.name "trained_models"
          git config --global user.email "trained_models"
          git add ${{ needs.create_new_branch.outputs.MODELPATH }}
          git commit -m "Added model files"
          git push origin ${{ needs.create_new_branch.outputs.BRANCHNAME }}
  
  build:
    needs: [create_new_branch, push-model]
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner 游릭
    - uses: actions/checkout@v3
      if: needs.create_new_branch.outputs.BRANCHNAME == ''
      with:
        ref: issue-${{ github.event.issue.number }}

    # If branchName is empty use issue number, else, use the branchName 游릭
    - uses: actions/checkout@v3
      if: needs.create_new_branch.outputs.BRANCHNAME != ''
      with:
          ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    # Install yaml
    - name: Install yaml and oyaml
      run: |
          pip install pyyaml
          pip install oyaml

    # Install linkml
    - name: Install LinkML
      run: pip install linkml
        
    # Create model card and spec.yaml file
    - name: Validate model card and spec files
      run: |
          echo "## Model Card and Spec Validation :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          echo "Model Card and spec yaml files are being validated here with LinkML Schema" >> $GITHUB_STEP_SUMMARY
          python ./.github/workflows/create_model_card_and_spec.py
      env:
          model_path: ${{ needs.create_new_branch.outputs.MODELPATH }}
      
    # Update the model's spec.yaml file
    - name: Update yaml file
      run: python ./.github/workflows/update_yaml_info.py
    
    # Commit the changes (spec.yaml file and model card) 游릭
    - name: Commit changes
      run: |
        git config --global user.name "trained_models"
        git config --global user.email "trained_models"
        git add ${{ needs.create_new_branch.outputs.MODELPATH }}/spec.yaml
        git commit -m "Updated spec.yaml"
        git push origin ${{ needs.create_new_branch.outputs.BRANCHNAME }}

  build-docker:
    needs: [create_new_branch, push-model, build]

    runs-on: ubuntu-latest

    outputs:
      IMAGENAME: ${{ steps.set_image_name.outputs.image_name }}
      MODELNAME: ${{ steps.set_image_name.outputs.model_name }}

    steps:
      # Cleanup steps to free up disk space
      - name: Cleanup disk space for large docker images
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        

      # Checkout the repository to the GitHub Actions runner 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}

      # Get image name 游릭
      - name: Set docker image name
        id: set_image_name
        run: |
          full_path="${{ needs.create_new_branch.outputs.MODELPATH }}"
          model_name=$(echo "$full_path" | awk -F '/' '{print $(NF-1)}')
          echo "image_name=neuronets/$model_name" >> $GITHUB_OUTPUT
          echo "model_name=$model_name" >> $GITHUB_OUTPUT

      # Build the Docker image 游릭
      #- name: Build Docker image
        #run: |
          #docker build -t ${{ steps.set_image_name.outputs.model_name }} ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker
          #docker save --output ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker/${{ steps.set_image_name.outputs.model_name }}.tar ${{ steps.set_image_name.outputs.model_name }}

      # Upload artifact 游릭
      #- name: Upload artifact
        #uses: actions/upload-artifact@v3
        #with:
          #name: ${{ steps.set_image_name.outputs.model_name }}
          #path: ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker/${{ steps.set_image_name.outputs.model_name }}.tar

  push-weights:
    needs: [create_new_branch, push-model, build, build-docker]
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner to the new branch created for the issue 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}

      # Install git-annex 游릭
      - name: Install git-annex
        run: |
          sudo apt-get update
          sudo apt-get install git-annex
    
      - name: Verify git-annex Installation
        run: git-annex version

      # Install datalad 游릭
      - name: Install Datalad
        run: |
          sudo apt-get install datalad
          python3 -m pip install datalad-osf
          pip install requests
          git config --global user.name "trained_models"
          git config --global user.email "trained_models"
      
      #Git annex addurl the weights
      - name: Git-annex/Datalad add the weights and sample data
        env:
          OSF_TOKEN: ${{ secrets.OSF_TOKEN }}
        run: |
              datalad siblings
              datalad download-url -m "Added Weights" -O ./${{ needs.create_new_branch.outputs.MODELPATH }}/weights/best_model.pth "${{ needs.create_new_branch.outputs.WEIGHTS }}"
              datalad download-url -m "Added Sample Dataset" -O ./${{needs.create_new_branch.outputs.MODELPATH}}/example-data/sample.nii.gz "${{needs.create_new_branch.outputs.SAMPLEDATA}}"
              datalad save . -m "Added model weights and sample data"
              #datalad push --to osf-annex2-storage
              datalad push --to origin

  start-runner:
    needs: [create_new_branch, push-model, build, build-docker, push-weights]

    runs-on: ubuntu-latest

    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_TOKEN }}
          ec2-image-id: ${{ vars.AWS_IMAGE_ID }}
          ec2-instance-type: ${{ vars.AWS_INSTANCE_TYPE }}
          subnet-id: ${{ vars.AWS_SUBNET }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP }}

  test-model:
    name: Do the job on the runner
    needs: [create_new_branch, push-model, build, build-docker, push-weights, start-runner] # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    steps:
        # Setups singularity to the job to make it accessible to other steps
        # Cleanup steps to free up disk space
      - name: Cleanup disk space for large docker images
        run: |
              sudo rm -rf /usr/share/dotnet
              sudo rm -rf /opt/ghc
              sudo rm -rf "/usr/local/share/boost"
              sudo rm -rf /opt/hostedtoolcache
              sudo rm -rf "$AGENT_TOOLSDIRECTORY"
            
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
        
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}


      - name: Install singularity
        run: |

          sudo apt-get update && \
          sudo apt-get install -y build-essential \
          libseccomp-dev pkg-config squashfs-tools cryptsetup

          wget https://github.com/sylabs/singularity/releases/download/v4.0.0/singularity-ce_4.0.0-focal_amd64.deb

          sudo apt install ./singularity-ce_4.0.0-focal_amd64.deb -y
          singularity version

      #Download the artifact of the docker image
      #- name: Download docker image
        #uses: actions/download-artifact@v3
        #with:
          #name: ${{ needs.build-docker.outputs.MODELNAME }}
          #path: ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker

      # Convert the docker image to a singularity image
      - name: Convert docker image to singularity image
        run: |
          singularity pull ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker/${{ needs.build-docker.outputs.MODELNAME }}.sif docker://edwardjosue2005/deepcsr

      # Datalad get the sample dataset
      - name: Get sample dataset & weights
        run: |
          sudo apt install python3-pip -y
          pip install datalad

          datalad get ./${{ needs.create_new_branch.outputs.MODELPATH }}/weights/best_model.pth

          datalad get ./${{ needs.create_new_branch.outputs.MODELPATH }}/example-data/sample.nii.gz

      # Run in singularity the test command saved under needs.create_new_branch.outputs.DEEPCSR
      - name: Run test command in Singularity
        run: |
          ls Testing/testing/1.0

          singularity exec --nv --bind /actions-runner,/actions-runner/_work/,/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ needs.create_new_branch.outputs.MODELPATH }}/,/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ needs.create_new_branch.outputs.MODELPATH }}/docker,/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ needs.create_new_branch.outputs.MODELPATH }}/weights,/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ needs.create_new_branch.outputs.MODELPATH }}/example-data:/output ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker/${{ needs.build-docker.outputs.MODELNAME }}.sif python ./${{ needs.create_new_branch.outputs.MODELPATH }}/predict.py --conf_path ./${{ needs.create_new_branch.outputs.MODELPATH }}/predict.yaml --model_checkpoint ./${{ needs.create_new_branch.outputs.MODELPATH }}/weights/best_model.pth --dataset ./${{ needs.create_new_branch.outputs.MODELPATH }}/example-data/sample.nii.gz --output_dir .
         
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [create_new_branch, push-model, build, build-docker, push-weights, start-runner, test-model] # required to wait when the main job is done

    runs-on: ubuntu-latest

    if: ${{ always() }}
    # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
            aws-region: ${{ vars.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

  failed:
    
    runs-on: ubuntu-latest

    needs: [create_new_branch, push-model, build, build-docker, push-weights, start-runner, test-model]

    if: ${{ failure() }}

    steps:
      
      - name: Set labels
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'set-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          labels: 'failed'

      - name: Create comment
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
              Hello @${{ github.event.issue.user.login }}. The folders/scripts you provided did not pass our tests. Please check out the Action, and modify this issue accordingly with other/same urls. 

              When ready, just change the label of this issue to "Ready for testing".
  
          emoji: '+1,eyes'

  success:
      
      needs: [create_new_branch, push-model, build, build-docker, push-weights, start-runner, test-model, stop-runner]
        
      runs-on: ubuntu-latest
        
      steps:
          - name: Set labels
            uses: actions-cool/issues-helper@v3
            with:
              actions: 'set-labels'
              token: ${{ secrets.GITHUB_TOKEN }}
              issue-number: ${{ github.event.issue.number }}
              labels: 'success'
        
          - name: Create comment
            uses: actions-cool/issues-helper@v3
            with:
                  actions: 'create-comment'
                  token: ${{ secrets.GITHUB_TOKEN }}
                  issue-number: ${{ github.event.issue.number }}
                  body: |
                      Hello @${{ github.event.issue.user.login }}. The workflow linked to adding your model finished successfully! Please double check that this issue's tag is "success."  
        
                      A Draft PR should be linked to this issue. Now that your model passed the checks, feel free to change the status of the PR to "ready for review."

                      Thank you for adding a model to Nobrainer-Zoo!
          
                  emoji: '+1,hooray,rocket'
